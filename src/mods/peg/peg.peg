return [[
	           rules :  rule +
	            rule :  lhs rhs
	             lhs :  _pattern_ (":" / "=" / ":=")
                 rhs :  element elements
	       `pattern` :  symbol / hidden-pattern
	  hidden-pattern :  "<" symbol ">"
	       `element` :  !lhs _( compound
	       	                  / simple
	       	                  / comment ) ; with a comment
	      `elements` :  choice 
	      	          / cat 
	      	          / ""
	      `compound` :  group 
	                  / enclosed 
	                  / hidden-match 
	  	    `simple` :  prefixed 
	                  / suffixed 
	                  / atom 
	          choice :  _"/" element elements
	             cat :  _ element elements
	           group :  _"("_ rhs_ ")" 
       	  `enclosed` :  literal
       	              / set
       	              / range
	    hidden_match :  _"<"_ rhs_ ">"
	         comment : ";" comment-c ; make real
	        prefixed :  if-not-this 
	                  / not-this 
	                  / if-and-this
	     if-not-this :  "!" _allowed-prefixed
	     not-this    :  "-" _allowed-prefixed
	     if-and-this :  "&" _allowed-prefixed
            suffixed :  optional 
	                  / more-than-one 
	                  / maybe 
	                  / with-suffix 
	                  / some-number
	        optional :  allowed-suffixed_ "*"
	   more-than-one :  allowed-suffixed_ "+"
	           maybe :  allowed-suffixed_ "?"
	     some-number :  allowed-suffixed_ "$" some-num-c
	     with-suffix :  some-number ("*"/"+"/"?")
	allowed-prefixed :  compound 
	                  / suffixed 
	                  / atom
	allowed-suffixed :  compound
					  / prefixed 
					  / atom
	            atom :  symbol / ws 
                  ws : "_"
	literal :  '"' (string / "") '"'  
    set     :  "{" set-c+ "}"   
    range   :  "[" range-c "]"   
    comment-m : -"\n" ANY
    comment-c : ";" comment-m* "\n"
   	local comment_m  = -P"\n" * P(1)
	local comment_c = P";" * comment_m^0 * P"\n"
	local letter = R"AZ" + R"az" 
	local valid_sym = letter + P"-"  
	local digit = R"09"
	local sym = valid_sym + digit
	local WS = P' ' + P'\n' + P',' + P'\09'
	local symbol = letter * ( -(P"-" * WS) * sym )^0  -- incorrect: allows -symbol-name- 
	local string_match = -P"\"" * -P"\\" * P(1)
	local string = (string_match + P"\\\"" + P"\\")^1
	local range_match =  -P"-" * -P"\\" * -P"]" * P(1)
	local range_capture = (range_match + P"\\-" + P"\\]" + P"\\")
	local range_c  = range_capture^1 * P"-" * range_capture^1
	local set_match = -P"}" * -P"\\" * P(1)
	local set_c    = (set_match + P"\\}" + P"\\")^1
	local some_num_c =   digit^1 * P".." * digit^1
					 +   (P"+" + P"-")^0 * digit^1



    
]]
